// Code generated by go-bindata.
// sources:
// tmpl/player.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplPlayerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6f\x8f\xd3\xb8\x13\x7e\xdf\x4f\x31\x14\x41\x53\xfd\x9a\xf4\x0f\xec\xc2\x2f\x24\x95\x60\x77\xe1\xd0\x71\xb0\x82\x85\x3b\x74\xba\x17\x6e\x3c\x6d\x7d\x4d\xec\xc8\x9e\xb4\x0d\xa8\xdf\xfd\xe4\x24\x6d\xd3\x3f\x0b\x5b\xb4\xa9\x76\x93\x8c\x67\x9e\x67\x6c\xcf\x3c\xb5\x1a\x3c\xb8\xfc\x70\x71\xf3\xf5\xfa\x0a\xa6\x94\xc4\xc3\x46\x60\x6f\x10\x33\x39\x09\x9b\x28\x9b\xd6\x80\x8c\x0f\x1b\x00\x00\x41\x82\xc4\x20\x9a\x32\x6d\x90\xc2\x66\x46\x63\xf7\x79\x13\x58\x46\x2a\x8d\x59\x5e\xf9\x90\xa0\x18\x87\xdf\xbf\x83\x67\x74\x04\xab\x15\x74\xe1\x8b\x41\x3d\x0f\xba\xe5\x48\x23\xe8\x96\x88\xc1\x48\xf1\x7c\xd8\x68\x04\x86\x72\x6b\xb7\xd1\xd6\x04\xdf\x8b\xc7\xe2\x95\x45\xb3\x89\x56\x99\xe4\x6e\xa4\x62\xa5\x7d\x78\x38\x18\xd9\xcf\x8b\x8d\xcb\xda\x3e\x3e\xb7\x9f\xd2\xbe\x2a\xfe\xcf\x05\x47\x55\x03\x4b\x84\x74\x17\x82\xd3\xd4\x87\xf3\x5e\x2f\x5d\xd6\x7d\xbd\x85\x66\x69\x8a\xba\xe6\xce\x85\xb1\xb3\xf2\x61\x1c\xe3\x72\xcb\x67\xdf\x5c\x2e\x34\x46\x24\x94\xf4\x2d\x7f\x96\xc8\xed\xf8\xbf\x99\x21\x31\xce\xdd\x48\x49\x42\x49\x3e\x44\x28\x09\xf5\xd6\x81\xc5\x62\x22\x5d\x41\x98\x98\xdd\xc1\x2a\x93\x11\xc9\x5a\x16\x6e\xa2\xbe\xb9\x23\xb5\x74\xcd\x94\x71\xb5\xf0\x85\x34\x48\xd0\x4b\x97\xd0\x4f\x97\xc5\xdd\xfe\x3d\x1c\x17\xd7\x96\xc4\x5d\xe0\x68\x26\xe8\x17\x22\x7f\x21\x62\xb3\x49\xfe\x9a\x76\xa2\x19\x17\x28\xc9\x89\x85\x44\xa6\x3b\x10\xe3\x98\x80\x54\x5a\x3d\x8d\x14\x91\x4a\x3a\xe5\xe6\xb9\x86\x54\xea\xf4\xbc\xde\x59\x67\x0d\xde\xde\x19\xea\x77\xd6\xdb\xdb\x6e\x1f\xa7\xb5\x8b\x54\x52\x6d\xa9\x0b\xb6\x0a\x0f\xce\x1e\x6d\x30\xa0\xdf\xeb\x3d\xba\x05\xa7\x4a\xff\x3e\xa0\xd4\xbd\xa0\x24\xe6\x3e\x60\x0e\x21\x36\x3b\x70\x07\xa0\xb1\x88\x09\xb5\x9f\x6a\x35\x11\xdc\xbf\xfc\xeb\x6d\xc2\x26\x78\xa3\x99\x34\x63\xa5\x13\xef\x0f\x11\x69\x65\xd4\x98\xbc\x0d\xbe\x21\xa6\xe9\xc2\x6e\xa0\x21\x1d\xb6\x2a\x8e\x56\x07\x50\xf2\xba\xb9\xa0\x6b\x75\xde\x54\x71\x37\x79\x8a\x61\xef\xe8\x14\xaa\xf6\x3f\xac\xf3\xb2\x3d\x34\x47\xed\x5a\x94\xcc\xf8\xe7\xe9\xf2\x58\x1f\xdc\xea\xf2\xd3\x21\xdf\x56\xbf\x51\xb1\xe0\xf0\x90\x47\xf6\xf3\xe2\x40\x24\x84\xb4\x6b\xec\x8e\x62\x15\xcd\x6a\xda\x94\x69\xa3\xb4\x9f\x2a\xb1\x2b\x01\xd5\x64\xce\x8b\xab\xb6\xd0\x4a\x92\x3b\x66\x89\x88\x73\xff\xa5\x16\x2c\xde\x1b\x32\xe2\x1b\xfa\xfd\xb3\x7a\x86\x85\x7d\x81\x62\x32\x25\x7f\xa4\x62\xbe\x1d\x49\x19\xe7\x42\x4e\xec\x84\x60\xf0\xb4\x1e\x43\xb8\x24\x97\x63\xa4\x34\x2b\x24\x4c\x2a\x89\x7b\xa3\x95\x00\xd4\x5b\x7f\x67\xe9\xb7\x52\xe5\x4f\xd5\x7c\x47\x36\xef\x57\x0d\xca\xae\x3f\x54\x83\x52\x25\x4e\x57\x83\xb2\xc0\xcb\x62\x2f\x0b\xff\x97\xd5\xe0\x24\xa8\x5b\xd5\xe0\x24\x94\xdb\xd5\xe0\x14\x98\x1f\xaa\xc1\x4f\x81\xee\x41\x0d\xaa\xb6\xdf\x57\x83\x4a\x24\x4e\x51\x83\x83\xef\xfc\xa2\x24\x59\x44\x62\x8e\xb5\x9a\x4c\x95\x11\x45\xa9\x6b\x8c\x99\x1d\xab\x95\xbb\x4a\x6d\x7f\xaf\x31\x1a\x41\xb7\x3a\x8d\x04\x5c\xcc\x21\x8a\x99\x31\x61\xb3\x3a\x1c\x34\xab\x13\xce\xb4\x5f\x3b\xde\x04\xdd\x69\xbf\xb2\x97\x07\x0e\xc1\xc3\xa6\xd5\x04\xd4\x4d\xb0\x87\x00\xad\x62\x33\xdc\xf0\x05\x46\x65\x3a\x42\x30\x3a\x0a\x9b\x5b\x94\x26\x90\x9d\x6e\x61\x49\x44\x82\xf6\xcd\x9a\x87\x41\xb7\x0c\xd8\x22\x7c\x55\x99\x86\x91\x56\x0b\x83\x1a\xb8\x42\x03\x52\x11\x98\x2c\x55\x9a\x80\xa6\x58\x9d\x7b\x88\x4d\xbc\x32\xad\x6e\x61\xa8\x72\x1c\xe9\xea\xa1\x36\xbd\x51\x46\xa4\xa4\x69\xd6\xb2\x2c\x4d\xc0\x19\x31\x57\x33\xc2\xb0\xd9\xf7\x7a\xcd\x4d\x00\xc9\xe6\xb0\xef\xf5\x96\x41\xb7\x74\xfc\x49\xe4\xe0\x6c\x3f\x74\x70\x76\xd7\xd8\x83\xd0\x3b\x47\x3e\x3b\x08\x7d\x76\xc7\xd8\xc1\xfe\x5c\x07\x07\x73\x0d\xba\x5c\xcc\xed\x59\xb6\xbc\x99\x48\x8b\x94\x86\x0d\x67\x9c\xc9\xe2\x60\xe8\xb4\xab\xfa\x9b\x33\x0d\x65\x39\x40\x08\x5c\x45\x59\x82\x92\xbc\x09\xd2\x55\x8c\xf6\xf1\x55\xfe\x96\x3b\xad\xd2\xa3\xd5\xee\x6c\xab\x9d\xa4\x39\x1e\x61\x5e\xe5\x17\x36\xb7\xf7\x2c\x41\xa7\x35\x22\xd9\x6a\xbf\x68\x14\x71\x6b\x72\x50\xf2\x15\xc9\x8b\x58\x44\x33\x07\xdb\xf5\x46\x28\x68\x3c\x7b\xb3\xdd\xf4\x91\x11\x42\x08\xa9\x3d\xcf\xbf\x8e\x15\x23\x07\x3d\x62\x7a\x82\x05\xdd\x4b\x22\x2d\x46\x19\xa1\xd3\xda\xac\x4d\x6b\xad\xb9\xab\x03\xc6\xdf\x31\xbf\x54\x0b\xb9\x4b\x68\x67\xff\xee\xea\xf5\x0d\x84\xf0\xe4\x59\x07\x3e\x5f\xdb\x87\xe7\x1d\xf8\xf8\xf6\xcd\x6f\x85\xf1\xff\x1d\xb8\xfc\xf0\xe7\x7b\x08\xe1\x69\xaf\x03\x9f\xae\x5f\x5e\x5c\x59\xf3\xa0\xfe\x65\x29\x8d\x8a\xd1\x8b\xd5\xc4\x41\x6f\x86\xf9\x85\xe2\x58\x93\x05\x31\x86\xad\x1d\xc2\x30\x2c\x08\xeb\x49\xd8\xcb\xcc\x44\xea\xb8\x67\xb5\xb8\xd5\xe6\x09\x63\x83\x47\x60\x3e\x5f\x1f\x05\x79\xd2\x3b\x05\xa4\x98\xe8\x51\x9c\x93\x72\xb1\x6b\x74\x7c\x4a\xa7\xa5\x53\x2c\xf0\x3e\x50\xca\x32\x83\xd7\x31\xcb\xbf\x58\xa1\x70\x0e\xf0\x0e\xf7\xba\x2c\xad\x9d\xca\x3a\x8a\xb1\x1f\xb9\xef\x55\x03\xb0\xb9\x56\xe5\xa9\x91\xf1\xfc\x13\xd9\xe2\x1c\xc2\x60\x3f\xdb\x9a\x63\x94\x69\x6d\xbf\x29\x44\x62\x3d\x7b\x3b\x6e\xf6\x7a\xfc\x18\x1e\xac\x4b\xde\x32\xf3\x1f\x79\xa0\xe4\x47\x1c\xf6\xd9\xa1\xd6\x45\x16\xd2\x69\xef\x0c\xaf\x76\xde\x8a\x4d\xb8\x3d\x3e\x66\xf9\xad\xe1\xd5\xca\xef\x37\x76\xb1\xe7\x06\x23\x25\xb9\x39\xd2\xd8\xf5\x05\xf9\x5f\x08\x95\xe3\xce\x5e\x6c\x04\x85\x71\x7e\x35\x47\x49\xef\x84\x21\x94\xa8\x9d\xd6\x0c\x73\xae\x16\xb2\xd5\xd9\x76\x73\x07\x48\x67\xd8\x2e\x43\x2b\x92\xc3\xc0\xc8\x96\x43\x11\x56\x14\x46\x15\x54\xd2\x16\xff\xfe\xfe\xc7\x1b\x2b\x7d\xc5\xa2\xa9\x17\xb1\x38\x76\xac\xb8\x75\x36\xb3\xb2\xaf\xfb\xeb\x3c\x22\xf9\x43\xa2\xb5\xbe\xed\x70\xad\xd6\x9c\x2b\xc7\xea\x54\xd0\x5d\xcb\x72\xd0\x2d\x7f\x6b\x08\xba\xe5\x8f\x1c\xff\x05\x00\x00\xff\xff\xc6\xa0\x04\x6c\xf5\x10\x00\x00")

func tmplPlayerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplPlayerHtml,
		"tmpl/player.html",
	)
}

func tmplPlayerHtml() (*asset, error) {
	bytes, err := tmplPlayerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/player.html", size: 4341, mode: os.FileMode(420), modTime: time.Unix(1483110111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/player.html": tmplPlayerHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"player.html": &bintree{tmplPlayerHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

